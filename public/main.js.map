{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/feed/feed.component.css","webpack:///./src/app/feed/feed.component.html","webpack:///./src/app/feed/feed.component.ts","webpack:///./src/app/login-form/login-form.component.css","webpack:///./src/app/login-form/login-form.component.html","webpack:///./src/app/login-form/login-form.component.ts","webpack:///./src/app/logs/logs.component.css","webpack:///./src/app/logs/logs.component.html","webpack:///./src/app/logs/logs.component.ts","webpack:///./src/app/post/post.component.css","webpack:///./src/app/post/post.component.html","webpack:///./src/app/post/post.component.ts","webpack:///./src/app/register-form/register-form.component.css","webpack:///./src/app/register-form/register-form.component.html","webpack:///./src/app/register-form/register-form.component.ts","webpack:///./src/app/register-login/register-login.component.css","webpack:///./src/app/register-login/register-login.component.html","webpack:///./src/app/register-login/register-login.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"html, body {\\r\\n    height: 100%;\\r\\n}\\r\\n\\r\\n.forms {\\r\\n    max-width: 350px;\\r\\n    margin: 0 auto;\\r\\n}\\r\\n\\r\\nh3 {\\r\\n    text-align: center;\\r\\n    margin-bottom: 50px;\\r\\n}\\r\\n\\r\\n.topStrip {\\r\\n    margin-bottom: 25px;\\r\\n}\\r\\n\\r\\n.topStrip h3 {\\r\\n    color: white;\\r\\n    margin: 0 auto;\\r\\n}\"","module.exports = \"<div class=\\\"bg-primary topStrip shadow\\\">\\r\\n  <h3>MEAN Social Network</h3>\\r\\n</div>\\r\\n<router-outlet>\\r\\n  <!-- Pages render here -->\\r\\n</router-outlet>\"","import { Component } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n  showAlert(alert) {\r\n    var count = 2; // set secconds\r\n    var counter = setInterval(function() {\r\n      alert.style.display = \"none\"\r\n        //clearInterval(counter) // stop interval\r\n    }, 1000 * count);\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { HttpModule, Http} from '@angular/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule }   from '@angular/forms';\r\n\r\nimport { AppComponent } from './app.component';\r\n\r\nimport { RouterModule } from '@angular/router';\r\nimport { FeedComponent } from './feed/feed.component';\r\nimport { RegisterFormComponent } from './register-form/register-form.component';\r\nimport { LoginFormComponent } from './login-form/login-form.component';\r\nimport { LogsComponent } from './logs/logs.component';\r\nimport { RegisterLoginComponent } from './register-login/register-login.component';\r\nimport { PostComponent } from './post/post.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    FeedComponent,\r\n    RegisterFormComponent,\r\n    LoginFormComponent,\r\n    LogsComponent,\r\n    RegisterLoginComponent,\r\n    PostComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    RouterModule.forRoot([\r\n      { \r\n        path: '',\r\n        component: RegisterLoginComponent\r\n      },\r\n      { \r\n        path: 'feed/:id_post/comments',\r\n        component: PostComponent\r\n      },\r\n      {\r\n        path: 'feed/page/:pageNr',\r\n        component: FeedComponent\r\n      },\r\n      { \r\n        path: 'logs', \r\n        component: LogsComponent \r\n      },\r\n      { \r\n        path: '**', \r\n        component: RegisterLoginComponent \r\n      }\r\n    ])\r\n  ],\r\n  providers: [FeedComponent, AppComponent, LogsComponent, PostComponent],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \".logout {\\r\\n    margin-left: 25px;\\r\\n}\\r\\n.addPost {\\r\\n    margin-bottom: 30px;\\r\\n}\\r\\n.addPost label{\\r\\n    margin-top: 15px;\\r\\n}\\r\\n.center {\\r\\n    text-align: center;\\r\\n}\\r\\n.pagination {\\r\\n    display: inline-block;\\r\\n}\\r\\n.pagination a {\\r\\n    color: black;\\r\\n    float: left;\\r\\n    padding: 8px 16px;\\r\\n    text-decoration: none;\\r\\n    transition: background-color .3s;\\r\\n    border: 1px solid #ddd;\\r\\n    margin: 0 4px;\\r\\n}\\r\\n.pagination a.active {\\r\\n    background-color: #007BFF;\\r\\n    color: white;\\r\\n    border: 1px solid #007BFF;\\r\\n}\\r\\ntextarea {\\r\\n    resize: none;\\r\\n}\\r\\n.formBtn {\\r\\n    margin-top: 25px;\\r\\n    margin-bottom: 0;\\r\\n}\\r\\n.formBtn button{\\r\\n    width: 100%;\\r\\n}\\r\\n.postBody {\\r\\n    margin-bottom: 25px;\\r\\n}\\r\\n.postBody .userInfo {\\r\\n    margin-bottom: 5px;\\r\\n}\\r\\n.postContent {\\r\\n    margin-top: 20px;\\r\\n}\\r\\n.shadow\\r\\n{\\r\\n    border: solid #BDBDBD 1px; \\r\\n    box-shadow: 5px 5px 20px rgba(0, 0, 0, 0.5); \\r\\n}\\r\\n.postButtons button {\\r\\n    margin-right: 15px;\\r\\n}\\r\\n.editForm {\\r\\n    margin-top: 25px;\\r\\n}\\r\\n#alertSucc {\\r\\n    text-align: center;\\r\\n    margin: 15px 0 0 0;\\r\\n    display: none;\\r\\n}\\r\\n#alertErr {\\r\\n    text-align: center;\\r\\n    margin-top: 25px;\\r\\n    display: none;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-4\\\">\\n      <div class=\\\"card shadow\\\">\\n        <div class=\\\"card-body\\\">\\n          <h4>Welcome {{ nameUser }}</h4>\\n          <form class=\\\"form-inline \\\">\\n            <div class=\\\"form-group\\\">\\n              <button type=\\\"button\\\"  (click)=\\\"logs();\\\" class=\\\"btn btn-primary btn-sm\\\">Logs</button>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <button type=\\\"button\\\" (click)=\\\"logout();\\\" class=\\\"btn btn-danger btn-sm logout\\\">Logout</button>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"col-md-8\\\">\\n\\n      <div class=\\\"card addPost shadow\\\">\\n        <div class=\\\"card-body\\\">\\n          <form>\\n            <h5>Add a new post</h5>\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"postTitle\\\">Title:</label>  \\n              <input\\n                required\\n                ngModel\\n                name=\\\"postTitle\\\"\\n                #postTitle=\\\"ngModel\\\"  \\n                type=\\\"text\\\" \\n                class=\\\"form-control\\\" \\n                id=\\\"postTitle\\\">\\n              <label for=\\\"postContent\\\">Content:</label>  \\n              <textarea \\n                required\\n                ngModel\\n                name=\\\"postContent\\\"\\n                #postContent=\\\"ngModel\\\" \\n                class=\\\"form-control\\\" \\n                rows=\\\"5\\\" \\n                id=\\\"postContent\\\"></textarea>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <div *ngIf=\\\"postTitle.invalid || postContent.invalid ; else button_available\\\">\\n                <button disabled class=\\\"btn btn-outline-primary\\\">Publish</button>\\n              </div>\\n          \\n              <ng-template #button_available>\\n                <button type=\\\"button\\\" (click)=\\\"publishPost(postTitle.value, postContent.value);\\\"class=\\\"btn btn-primary\\\">Publish</button>\\n              </ng-template>\\n\\n              <div class=\\\"alert alert-success\\\" role=\\\"alert\\\" id=\\\"alertSucc\\\">\\n                Post published with success!\\n              </div>\\n\\n              <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\" id=\\\"alertErr\\\">\\n                Please fill all the fields required\\n              </div>\\n\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n\\n      <h5>Posts:</h5>\\n      <ng-container *ngFor=\\\"let post of data.docs\\\">\\n        <div class=\\\"list-group postBody shadow\\\">\\n          <a class=\\\"list-group-item flex-column align-items-start\\\">\\n            <div class=\\\"d-flex w-100 justify-content-between\\\">\\n              <h5 class=\\\"mb-1\\\">{{ post.title }}</h5>\\n              <small>{{ post.dateCreated | date:'dd/MM/yyyy HH:mm' }}</small>\\n            </div>\\n            \\n            <div class=\\\"form-group postContent\\\">\\n              <p class=\\\"mb-1\\\">{{ post.content }}</p>\\n            </div>\\n            <div class=\\\"form-group userInfo\\\">\\n              <small>User: {{ post.user.name }}</small>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <small>Email: {{ post.user.email }}</small>\\n            </div>\\n            <form class=\\\"postButtons\\\">\\n              <div *ngIf=\\\"post.user.email == userEmail\\\">\\n                <button type=\\\"button\\\" class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"toggleEdit( post._id )\\\">Edit</button>\\n                <button type=\\\"button\\\" class=\\\"btn btn-danger btn-sm\\\" (click)=\\\"deletePost( post._id )\\\">Delete</button>\\n              </div>\\n            </form>\\n            <div *ngIf=\\\"toggle == post._id\\\">\\n              <form class=\\\"editForm\\\">\\n                <h5>Edit Post</h5>\\n                <div class=\\\"form-group\\\">\\n                  <label for=\\\"postTitleEdit\\\">Title:</label>  \\n                  <input\\n                    required\\n                    ngModel\\n                    name=\\\"postTitleEdit\\\"\\n                    #postTitleEdit=\\\"ngModel\\\"  \\n                    type=\\\"text\\\" \\n                    class=\\\"form-control\\\" \\n                    id=\\\"postTitleEdit\\\"\\n                    placeholder=\\\"{{ post.title }}\\\">\\n                  <label for=\\\"postContentEdit\\\">Content:</label>  \\n                  <textarea \\n                    required\\n                    ngModel\\n                    name=\\\"postContentEdit\\\"\\n                    #postContentEdit=\\\"ngModel\\\" \\n                    class=\\\"form-control\\\" \\n                    rows=\\\"5\\\" \\n                    id=\\\"postContentEdit\\\"\\n                    placeholder=\\\"{{ post.content }}\\\"></textarea>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                  <div *ngIf=\\\"postTitleEdit.invalid || postContentEdit.invalid ; else button_available\\\">\\n                    <button disabled class=\\\"btn btn-outline-primary\\\">Confirm</button>\\n                  </div>\\n              \\n                  <ng-template #button_available>\\n                    <button type=\\\"button\\\" (click)=\\\"editPost( post._id, postTitleEdit.value, postContentEdit.value );\\\"class=\\\"btn btn-primary\\\">Confirm</button>\\n                  </ng-template>\\n                </div>\\n              </form>\\n            </div>\\n            <div class=\\\"form-group formBtn\\\">\\n              <button type=\\\"button\\\" class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"goToComment( post._id );\\\">Go to Post</button>\\n            </div>\\n          </a>\\n        </div>\\n      </ng-container>\\n\\n      <div class=\\\"center\\\">\\n        <div class=\\\"pagination\\\">\\n          <ng-container>\\n            <div *ngIf=\\\"splitUrl[1] == 1\\\">\\n              <a class=\\\"active\\\" href=\\\"/feed/page/1\\\">1</a>\\n              <a href=\\\"/feed/page/2\\\">2</a>\\n              <a href=\\\"/feed/page/3\\\">3</a>\\n              <a href=\\\"/feed/page/2\\\">&raquo;</a>\\n            </div>\\n            <div *ngIf=\\\"splitUrl[1] == 2\\\">\\n              <a href=\\\"/feed/page/1\\\">&laquo;</a>\\n              <a href=\\\"/feed/page/1\\\">1</a>\\n              <a class=\\\"active\\\" href=\\\"/feed/page/2\\\">2</a>\\n              <a href=\\\"/feed/page/3\\\">3</a>\\n              <a href=\\\"/feed/page/3\\\">&raquo;</a>\\n            </div>\\n            <div *ngIf=\\\"splitUrl[1] == 3\\\">\\n              <a href=\\\"/feed/page/2\\\">&laquo;</a>\\n              <a href=\\\"/feed/page/1\\\">1</a>\\n              <a href=\\\"/feed/page/2\\\">2</a>\\n              <a class=\\\"active\\\" href=\\\"/feed/page/3\\\">3</a>\\n            </div>\\n          </ng-container>\\n        </div>\\n      </div>\\n          \\n    </div>\\n  </div>\\n</div>\"","import { Component} from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'feed',\r\n  templateUrl: './feed.component.html',\r\n  styleUrls: ['./feed.component.css']\r\n})\r\nexport class FeedComponent {\r\n  \r\n  title = 'feed';\r\n  private apiUrlPOST = 'http://localhost:3000/api/post'\r\n  pageUrl = this.router.url;\r\n  splitUrl = this.pageUrl.split(\"/feed/page/\");\r\n  data: any = {};\r\n  dataComment: any = {};\r\n  userEmail = localStorage.getItem('userEmail');\r\n  nameUser = localStorage.getItem('nomeuser');\r\n  token = localStorage.getItem('token');\r\n  toggle = '';\r\n\r\n  constructor(private http: HttpClient, private router: Router) {\r\n    \r\n    this.getPosts(this.splitUrl[1]);\r\n  }\r\n\r\n  getPosts(page) {\r\n    return this.http.get('http://localhost:3000/api/post?page='+page+'&limit=15', {\r\n      headers:\r\n        new HttpHeaders()\r\n          .append('Authorization', 'Bearer ' + this.token)\r\n    }).subscribe(\r\n      res => {\r\n        console.log(res);\r\n        this.data = res;\r\n      },\r\n      err => {\r\n        console.log(err)\r\n      }\r\n    )\r\n  }\r\n\r\n  toggleEdit(id) {\r\n    if(this.toggle == ''){\r\n      this.toggle = id;\r\n    }\r\n    else{\r\n      this.toggle = ''\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    localStorage.clear();\r\n    this.router.navigateByUrl('');\r\n  }\r\n\r\n  logs() {\r\n    if(this.token){\r\n      this.router.navigateByUrl('/logs');\r\n    }\r\n  }\r\n\r\n  publishPost(title, content) {\r\n    var alertSucc = (<HTMLInputElement>document.getElementById('alertSucc'));\r\n    var alertErr = (<HTMLInputElement>document.getElementById('alertErr'));\r\n\r\n    return this.http.post(this.apiUrlPOST, {\r\n      \r\n      \"title\": title.viewModel,\r\n      \"content\": content\r\n\r\n    },{\r\n      headers:\r\n        new HttpHeaders()\r\n          .append('Authorization', 'Bearer ' + this.token)\r\n    }).subscribe(\r\n      res => { \r\n        console.log(res);\r\n        (<HTMLInputElement>document.getElementById('postTitle')).value = '';\r\n        (<HTMLInputElement>document.getElementById('postContent')).value = '';\r\n        alertSucc.style.display = \"block\";\r\n        this.showAlert(alertSucc);\r\n        this.getPosts(this.splitUrl[1]);\r\n      },\r\n      err => {\r\n        console.log(err)\r\n        alertSucc.style.display = \"none\";\r\n        alertErr.style.display = \"block\";\r\n        this.showAlert(alertErr);\r\n      }\r\n    );\r\n  }\r\n\r\n  showAlert(alert) {\r\n    var count = 2; // set secconds\r\n    var counter = setInterval(function() {\r\n      alert.style.display = \"none\"\r\n        //clearInterval(counter) // stop interval\r\n    }, 1000 * count);\r\n  }\r\n\r\n  goToComment(postId) {\r\n    \r\n    console.log('PostId ' + postId);\r\n    localStorage.setItem('postId', postId);\r\n\r\n    this.router.navigateByUrl('/feed/'+postId+'/comments');\r\n    \r\n  }\r\n\r\n  editPost(postId, title, content) {\r\n    return this.http.put(this.apiUrlPOST+'/'+postId, {\r\n      \r\n      \"title\": title,\r\n      \"content\": content\r\n\r\n    },{\r\n      headers:\r\n        new HttpHeaders()\r\n          .append('Authorization', 'Bearer ' + this.token)\r\n    }).subscribe(\r\n      res => { \r\n        this.toggle = ''\r\n        this.getPosts(this.splitUrl[1]);\r\n      },\r\n      err => {\r\n        console.log(err)\r\n      }\r\n    );\r\n  }\r\n\r\n  deletePost(postId) {\r\n    return this.http.delete(this.apiUrlPOST+'/'+postId,{\r\n      headers:\r\n        new HttpHeaders()\r\n          .append('Authorization', 'Bearer ' + this.token)\r\n    }).subscribe(\r\n      res => { \r\n        console.log(res);\r\n        this.getPosts(this.splitUrl[1]);\r\n      },\r\n      err => {\r\n        console.log(err)\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","module.exports = \"#alertErrLogin {\\r\\n    text-align: center;\\r\\n    margin-top: 25px;\\r\\n    display: none;\\r\\n}\"","module.exports = \"<form class=\\\"forms\\\">\\n  <h4>Login</h4>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"emailLogin\\\">Email</label>\\n    <input \\n      required \\n      ngModel \\n      name=\\\"emailLogin\\\"\\n      #emailLogin=\\\"ngModel\\\" \\n      id=\\\"emailLogin\\\" \\n      type=\\\"email\\\"\\n      class=\\\"form-control\\\">\\n    <div class=\\\"alert alert-danger\\\" *ngIf=\\\"emailLogin.touched && !emailLogin.valid\\\">\\n      <div *ngIf=\\\"emailLogin.errors.required\\\">Email is required</div>\\n    </div>\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"passwordLogin\\\">Password</label>\\n    <input \\n      required \\n      ngModel \\n      name=\\\"passwordLogin\\\"\\n      #passwordLogin=\\\"ngModel\\\"  \\n      id=\\\"passwordLogin\\\"\\n      type=\\\"password\\\"\\n      class=\\\"form-control\\\">\\n    <div class=\\\"alert alert-danger\\\" *ngIf=\\\"passwordLogin.touched && !passwordLogin.valid\\\">\\n      <div *ngIf=\\\"passwordLogin.errors.required\\\">Password is required</div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"form-group\\\">\\n    <div *ngIf=\\\"emailLogin.invalid || passwordLogin.invalid ; else button_available\\\">\\n      <button disabled class=\\\"btn btn-outline-primary\\\">Sign In</button>\\n    </div>\\n\\n    <ng-template #button_available>\\n      <button type=\\\"submit\\\" (click)=\\\"userLogin(emailLogin.value, passwordLogin.value)\\\" class=\\\"btn btn-primary\\\">Sign Ip</button>\\n    </ng-template>\\n\\n    <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\" id=\\\"alertErrLogin\\\">\\n      Wrong credentials!\\n    </div>\\n  </div>\\n</form>\"","import { Component } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.css']\n})\nexport class LoginFormComponent {\n  title = 'login';\n  data: any = {};\n\n  constructor(private http: HttpClient, private router: Router) {\n  }\n\n  userLogin(email, pass){\n\n    var alertErr = (<HTMLInputElement>document.getElementById('alertErrLogin'));\n\n    return this.http.post(\"http://localhost:3000/api/auth\", {\n      \n      \"email\": email,\n      \"password\": pass\n\n    }).subscribe(\n      res => {\n        console.log(res);\n        this.data = res;\n        \n        if(this.data.token){\n          localStorage.setItem('token', this.data.token);\n          localStorage.setItem('nomeuser', this.data.name);\n          localStorage.setItem('userEmail', this.data.email);\n          this.router.navigateByUrl('feed/page/1');\n        }\n      },\n      err => {\n        console.log(err)\n        alertErr.style.display = \"block\";\n        this.showAlert(alertErr);\n      })\n  }\n\n  showAlert(alert) {\n    var count = 2; // set secconds\n    var counter = setInterval(function() {\n      alert.style.display = \"none\"\n        //clearInterval(counter) // stop interval\n    }, 1000 * count);\n  }\n\n}\n","module.exports = \".btnFeed {\\r\\n    margin-bottom: 25px;\\r\\n}\\r\\n\\r\\n.listLogs {\\r\\n    margin-bottom: 15px;\\r\\n}\\r\\n\\r\\n.btnGoToPost {\\r\\n    margin: 5px 0 10px 0;\\r\\n}\\r\\n\\r\\n.shadow\\r\\n{\\r\\n    border: solid #BDBDBD 1px; \\r\\n    box-shadow: 5px 5px 20px rgba(0, 0, 0, 0.5); \\r\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-12\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary btnFeed \\\" (click)=\\\"goToFeed();\\\">< Feed</button>\\n      <h4>Logs:</h4>\\n      <div class=\\\"list-group \\\">\\n\\n        <ng-container *ngFor=\\\"let log of log.logs\\\">\\n          <a class=\\\"list-group-item flex-column align-items-start listLogs shadow\\\">\\n            <div class=\\\"d-flex w-100 justify-content-between\\\">\\n\\n              <div *ngIf=\\\"log.entityType == 'POST'\\\">\\n                <h5 class=\\\"mb-1\\\">Post</h5>\\n                <h6 class=\\\"mb-1\\\">Title: {{ log.entity.title }}</h6>\\n                <p class=\\\"mb-1\\\">Content: {{ log.entity.content }}</p>\\n                <p class=\\\"mb-1\\\">Date: {{ log.entity.dateCreated | date:'dd/MM/yyyy HH:mm' }}</p>\\n                <div *ngIf=\\\"log.entity.deleted == false\\\">\\n                  <button type=\\\"button\\\" class=\\\"btn btn-outline-primary btn-sm btnGoToPost\\\" (click)=\\\"goToPost( log.entity._id )\\\">Go to Post</button>\\n                </div>\\n                <div *ngIf=\\\"log.action == 'DELETE'\\\">\\n                  <span class=\\\"badge badge-danger\\\">Deleted</span>\\n                </div>\\n                <div *ngIf=\\\"log.action == 'READ'\\\">\\n                  <span class=\\\"badge badge-info\\\">Read</span>\\n                </div>\\n                <div *ngIf=\\\"log.action == 'CREATE'\\\">\\n                  <span class=\\\"badge badge-success\\\">Created</span>\\n                </div>\\n              </div>\\n\\n              <div *ngIf=\\\"log.entityType == 'COMMENT'\\\">\\n                <h5 class=\\\"mb-1\\\">Comment</h5>\\n                <p class=\\\"mb-1\\\">{{ log.entity.text }}</p>\\n                <div *ngIf=\\\"log.action == 'DELETE'\\\">\\n                  <span class=\\\"badge badge-danger\\\">Deleted</span>\\n                </div>\\n                <div *ngIf=\\\"log.action == 'CREATE'\\\">\\n                  <span class=\\\"badge badge-success\\\">Created</span>\\n                </div>\\n              </div>\\n\\n              <div *ngIf=\\\"log.entityType == 'USER'\\\">\\n                <h5 class=\\\"mb-1\\\">Account </h5>\\n                <p class=\\\"mb-1\\\">Nome: {{ log.entity.name }}</p>\\n                <p class=\\\"mb-1\\\">Email: {{ log.entity.email }}</p>\\n                <small class=\\\"text-success\\\">Created</small>\\n              </div>\\n              \\n              <small>{{ log.date | date:'dd/MM/yyyy HH:mm' }}</small>\\n            </div>\\n          </a>\\n        </ng-container>\\n        \\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n\"","import { Component } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'logs',\n  templateUrl: './logs.component.html',\n  styleUrls: ['./logs.component.css']\n})\nexport class LogsComponent {\n  title = 'logs';\n  private apiUrl = 'http://localhost:3000/api/user/logs';\n  log: any = {};\n\n  constructor(private http: HttpClient, private router: Router) {\n    this.getLogs();\n  }\n\n  getLogs() {\n    var token = localStorage.getItem('token');\n\n    return this.http.get(this.apiUrl, {\n      headers:\n        new HttpHeaders()\n          .append('Authorization', 'Bearer ' + token)\n    }).subscribe(\n      data => {\n        console.log(data);\n        this.log = data;\n      },\n      err => {\n        console.log(err)\n      }\n    );\n  }\n\n  goToFeed() {\n    this.router.navigateByUrl('/feed/page/1');\n  }\n\n  goToPost(postId) {\n    localStorage.setItem('postId', postId);\n\n    this.router.navigateByUrl('/feed/'+postId+'/comments');\n  }\n\n}\n","module.exports = \".backFeed {\\r\\n    margin-bottom: 25px;\\r\\n}\\r\\n\\r\\n.postBody {\\r\\n    margin-bottom: 25px;\\r\\n}\\r\\n\\r\\n.postContent {\\r\\n    margin-top: 15px;\\r\\n}\\r\\n\\r\\n.commentSection {\\r\\n    margin-top: 25px;\\r\\n}\\r\\n\\r\\n.commentBody {\\r\\n    margin-bottom: 25px;\\r\\n}\\r\\n\\r\\n.postButtons button{\\r\\n    margin: 10px 10px 0 0;\\r\\n}\\r\\n\\r\\ntextarea {\\r\\n    resize: none;\\r\\n}\\r\\n\\r\\n.editForm {\\r\\n    margin-top: 25px;\\r\\n    text-align: left;\\r\\n}\\r\\n\\r\\n.commentButtons button {\\r\\n    margin: 10px 10px 0 0;\\r\\n}\\r\\n\\r\\n.shadow\\r\\n{\\r\\n    border: solid #BDBDBD 1px; \\r\\n    box-shadow: 5px 5px 20px rgba(0, 0, 0, 0.5); \\r\\n}\\r\\n\\r\\n.maringZero {\\r\\n    margin-bottom: 0px;\\r\\n}\\r\\n\\r\\n.userInfo {\\r\\n    margin-bottom: 5px;\\r\\n}\\r\\n\\r\\n#alertSucc {\\r\\n    text-align: center;\\r\\n    margin: 15px 0 0 0;\\r\\n    display: none;\\r\\n}\\r\\n\\r\\n#alertErr {\\r\\n    text-align: center;\\r\\n    margin: 15px 0 0 0;\\r\\n    display: none;\\r\\n}\\r\\n\\r\\n.shadow\\r\\n{\\r\\n    border: solid #BDBDBD 1px; \\r\\n    box-shadow: 5px 5px 20px rgba(0, 0, 0, 0.5); \\r\\n}\\r\\n\"","module.exports = \"\\n<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-12\\\">\\n      <button type=\\\"button\\\" (click)=\\\"returnToFeed(); \\\"class=\\\"btn btn-primary backFeed\\\">< Feed</button>\\n\\n        <div class=\\\"list-group postBody shadow\\\">\\n          <a class=\\\"list-group-item flex-column align-items-start\\\" >\\n            <div class=\\\"d-flex w-100 justify-content-between\\\">\\n              <h5 class=\\\"mb-1\\\">{{ post.title }}</h5>\\n              <small>{{ post.dateCreated | date:'dd/MM/yyyy HH:mm' }}</small>\\n            </div>\\n            <div class=\\\"form-group postContent\\\">\\n              <p class=\\\"mb-1\\\">{{ post.content }}</p>\\n            </div>\\n            <div class=\\\"form-group userInfo\\\">\\n              <small>User: {{ post.user.name }}</small>\\n            </div>\\n            <div class=\\\"form-group userInfo\\\">\\n                <small>Email: {{ post.user.email }}</small>\\n            </div>\\n            <form class=\\\"postButtons\\\">\\n              <div *ngIf=\\\"post.user.email == userEmail\\\">\\n                <button type=\\\"button\\\" class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"toggleEdit( post._id )\\\">Edit</button>\\n                <button type=\\\"button\\\" class=\\\"btn btn-danger btn-sm\\\" (click)=\\\"deletePost()\\\">Delete</button>\\n              </div>\\n            </form>\\n            <div *ngIf=\\\"toggle == post._id\\\">\\n              <form class=\\\"editForm\\\">\\n                <h5>Edit Post</h5>\\n                <div class=\\\"form-group\\\">\\n                  <label for=\\\"postTitleEdit\\\">Title:</label>  \\n                  <input\\n                    required\\n                    ngModel\\n                    name=\\\"postTitleEdit\\\"\\n                    #postTitleEdit=\\\"ngModel\\\"  \\n                    type=\\\"text\\\" \\n                    class=\\\"form-control\\\" \\n                    id=\\\"postTitleEdit\\\"\\n                    placeholder=\\\"{{ post.title }}\\\">\\n                  <label for=\\\"postContentEdit\\\">Content:</label>  \\n                  <textarea \\n                    required\\n                    ngModel\\n                    name=\\\"postContentEdit\\\"\\n                    #postContentEdit=\\\"ngModel\\\" \\n                    class=\\\"form-control\\\" \\n                    rows=\\\"5\\\" \\n                    id=\\\"postContentEdit\\\"\\n                    placeholder=\\\"{{ post.content }}\\\"></textarea>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                  <div *ngIf=\\\"postTitleEdit.invalid || postContentEdit.invalid ; else button_available\\\">\\n                    <button disabled class=\\\"btn btn-outline-primary\\\">Confirm</button>\\n                  </div>\\n              \\n                  <ng-template #button_available>\\n                    <button type=\\\"button\\\" (click)=\\\"editPost(postTitleEdit.value, postContentEdit.value);\\\"class=\\\"btn btn-primary\\\">Confirm</button>\\n                  </ng-template>\\n                </div>\\n              </form>\\n            </div>\\n          </a>\\n        </div>\\n\\n    \\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-12\\\">\\n\\n      <div class=\\\"card addPost shadow\\\">\\n        <div class=\\\"card-body\\\">\\n          <form>\\n            <h5>Add a new comment</h5>\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"commentText\\\">Comment:</label>  \\n              <textarea \\n                required\\n                ngModel\\n                name=\\\"commentText\\\"\\n                #commentText=\\\"ngModel\\\" \\n                class=\\\"form-control\\\" \\n                rows=\\\"3\\\" \\n                id=\\\"commentText\\\">\\n              </textarea>\\n            </div>\\n            <div class=\\\"form-group maringZero\\\">\\n              <div *ngIf=\\\"commentText.invalid ; else button_available\\\">\\n                <button disabled class=\\\"btn btn-outline-primary\\\">Publish</button>\\n              </div>\\n          \\n              <ng-template #button_available>\\n                <button type=\\\"button\\\" (click)=\\\"publishComment(commentText.value);\\\"class=\\\"btn btn-primary\\\">Publish</button>\\n              </ng-template>\\n\\n              <div class=\\\"alert alert-success\\\" role=\\\"alert\\\" id=\\\"alertSucc\\\">\\n                  Comment published with success!\\n              </div>\\n\\n              <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\" id=\\\"alertErr\\\">\\n                Please fill the field required\\n              </div>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-12 commentSection\\\">\\n      <h5>Comments:</h5>\\n      <ng-container *ngFor=\\\"let comment of comments\\\">\\n\\n          <div class=\\\"list-group commentBody shadow\\\">\\n            <a class=\\\"list-group-item flex-column align-items-start\\\">\\n              <div class=\\\"d-flex w-100 justify-content-between\\\">\\n                <p class=\\\"mb-1\\\">{{ comment.text }}</p>\\n                <small>{{ comment.dateCreated | date:'dd/MM/yyyy HH:mm' }}</small>\\n              </div>\\n              \\n              <div class=\\\"form-group\\\">\\n                <small>User: {{ comment.user.name }}</small>\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                  <small>Email: {{ comment.user.email }}</small>\\n              </div>\\n              <form class=\\\"commentButtons\\\">\\n                <div *ngIf=\\\"comment.user.email == userEmail\\\">\\n                  <div class=\\\"form-group maringZero\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"toggleEdit( comment._id )\\\">Edit</button>\\n                    <button type=\\\"button\\\" class=\\\"btn btn-danger btn-sm\\\" (click)=\\\"deleteComment( comment._id )\\\" >Delete</button>\\n                  </div>\\n                  \\n                  <div *ngIf=\\\"toggle == comment._id\\\">\\n                    <form class=\\\"editForm\\\">\\n                      <h5>Edit Post</h5>\\n                      <div class=\\\"form-group\\\">\\n                        <textarea \\n                          required\\n                          ngModel\\n                          name=\\\"commentContentEdit\\\"\\n                          #commentContentEdit=\\\"ngModel\\\" \\n                          class=\\\"form-control\\\" \\n                          rows=\\\"5\\\" \\n                          id=\\\"commentContentEdit\\\"\\n                          placeholder=\\\"{{ comment.text }}\\\"></textarea>\\n                      </div>\\n                      <div class=\\\"form-group\\\">\\n                        <div *ngIf=\\\"commentContentEdit.invalid ; else button_available\\\">\\n                          <button disabled class=\\\"btn btn-outline-primary\\\">Confirm</button>\\n                        </div>\\n                    \\n                        <ng-template #button_available>\\n                          <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"editComment( comment._id, commentContentEdit.value )\\\">Confirm</button>\\n                        </ng-template>\\n                      </div>\\n                    </form>\\n                  </div>\\n  \\n                </div>\\n              </form>\\n            </a>\\n          </div>\\n      </ng-container>\\n    </div> \\n  </div>\\n</div>\\n\"","import { Component } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'post',\n  templateUrl: './post.component.html',\n  styleUrls: ['./post.component.css']\n})\nexport class PostComponent {\n  title = 'comment';\n  postId = localStorage.getItem('postId');\n  userEmail = localStorage.getItem('userEmail');\n  token = localStorage.getItem('token');\n  private apiUrlComments = 'http://localhost:3000/api/post/'+this.postId+'/comments'\n  private apiUrlPosts = 'http://localhost:3000/api/post/'+this.postId\n  comments: any = {};\n  post: any = {};\n  toggle = '';\n\n  constructor(private http: HttpClient, private router: Router) {\n    this.getComments();\n    this.getPost();\n  }\n\n  getPost() {\n    return this.http.get(this.apiUrlPosts, {\n      headers:\n        new HttpHeaders()\n          .append('Authorization', 'Bearer ' + this.token)\n    }).subscribe(\n      res => {\n        this.post = res;\n        console.log(this.post);\n      },\n      err => {\n        console.log(err)\n      }\n    )\n  }\n\n  getComments(){\n    return this.http.get(this.apiUrlComments, {\n      headers:\n        new HttpHeaders()\n          .append('Authorization', 'Bearer ' + this.token)\n    }).subscribe(\n      res => {\n        this.comments = res;\n        console.log('comments: ' ,this.comments);\n      },\n      err => {\n        console.log(err)\n      }\n    )\n  }\n\n  publishComment(commentText){\n\n    var alertSucc = (<HTMLInputElement>document.getElementById('alertSucc'));\n    var alertErr = (<HTMLInputElement>document.getElementById('alertErr'));\n\n    return this.http.post(this.apiUrlComments, {\n      \n      \"text\": commentText\n\n    },{\n      headers:\n        new HttpHeaders()\n          .append('Authorization', 'Bearer ' + this.token)\n    }).subscribe(\n      res => { \n        console.log(res);\n        alertSucc.style.display = \"block\";\n        this.showAlert(alertSucc);\n        this.getComments();\n        (<HTMLInputElement>document.getElementById('commentText')).value = \"\"\n      },\n      err => {\n        console.log(err)\n        alertSucc.style.display = \"none\";\n        alertErr.style.display = \"block\";\n        this.showAlert(alertErr);\n      }\n    );\n  }\n\n  showAlert(alert) {\n    var count = 2; // set secconds\n    var counter = setInterval(function() {\n      alert.style.display = \"none\"\n        //clearInterval(counter) // stop interval\n    }, 1000 * count);\n  }\n\n  returnToFeed(){\n    localStorage.removeItem('postId');\n    this.router.navigateByUrl('/feed/page/1');\n  }\n\n  deletePost() {\n    return this.http.delete(this.apiUrlPosts,{\n      headers:\n        new HttpHeaders()\n          .append('Authorization', 'Bearer ' + this.token)\n    }).subscribe(\n      res => { \n        console.log(res);\n        this.router.navigateByUrl('/feed/page/1');\n      },\n      err => {\n        console.log(err)\n      }\n    );\n  }\n\n  editPost(title, content) {\n  \n    return this.http.put(this.apiUrlPosts, {\n      \n      \"title\": title,\n      \"content\": content\n\n    },{\n      headers:\n        new HttpHeaders()\n          .append('Authorization', 'Bearer ' + this.token)\n    }).subscribe(\n      res => { \n        this.toggle = ''\n        this.getPost();\n      },\n      err => {\n        console.log(err)\n      }\n    );\n  }\n\n  toggleEdit(id) {\n    if(this.toggle == ''){\n      this.toggle = id;\n    }\n    else{\n      this.toggle = ''\n    }\n  }\n\n  deleteComment(commentId) {\n    return this.http.delete(this.apiUrlComments+'/'+commentId,{\n      headers:\n        new HttpHeaders()\n          .append('Authorization', 'Bearer ' + this.token)\n    }).subscribe(\n      res => { \n        console.log(res);\n        this.getComments();\n      },\n      err => {\n        console.log(err)\n      }\n    );\n  }\n\n  editComment(commentId, text) {\n    \n    return this.http.put(this.apiUrlComments+'/'+commentId, {\n      \n      \"text\": text\n\n    },{\n      headers:\n        new HttpHeaders()\n          .append('Authorization', 'Bearer ' + this.token)\n    }).subscribe(\n      res => { \n        this.toggle = ''\n        this.getComments();\n      },\n      err => {\n        console.log(err)\n      }\n    );\n  }\n\n}\n","module.exports = \"#alertSucc {\\r\\n    text-align: center;\\r\\n    margin-top: 25px;\\r\\n    display: none;\\r\\n}\\r\\n\\r\\n#alertErr {\\r\\n    text-align: center;\\r\\n    margin-top: 25px;\\r\\n    display: none;\\r\\n}\"","module.exports = \"<form>\\n  <h4>Register</h4>\\n  <div class=\\\"form-group \\\" >\\n    <label for=\\\"nomeRegister\\\">Nome</label>\\n    <input  \\n    required\\n    ngModel \\n    name=\\\"nomeRegister\\\"\\n    #nomeRegister=\\\"ngModel\\\" \\n    id=\\\"nomeRegister\\\"\\n    type=\\\"text\\\" \\n    class=\\\"form-control \\\">\\n    <div class=\\\"alert alert-danger\\\" *ngIf=\\\"nomeRegister.touched && !nomeRegister.valid \\\">\\n      <div *ngIf=\\\"nomeRegister.errors.required\\\">Name is required</div>\\n    </div>\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"emailRegister\\\">Email</label>\\n    <input \\n      required\\n      ngModel \\n      name=\\\"emailRegister\\\"\\n      #emailRegister=\\\"ngModel\\\"\\n      id=\\\"emailRegister\\\"\\n      type=\\\"email\\\" \\n      class=\\\"form-control\\\">\\n      <div class=\\\"alert alert-danger\\\" *ngIf=\\\"emailRegister.touched && !emailRegister.valid \\\">\\n        <div *ngIf=\\\"emailRegister.errors.required\\\">Email is required</div>\\n      </div>\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"passwordRegister\\\">Password</label>\\n    <input\\n      required\\n      ngModel \\n      name=\\\"passwordRegister\\\"\\n      #passwordRegister=\\\"ngModel\\\"\\n      id=\\\"passwordRegister\\\" \\n      type=\\\"password\\\" \\n      class=\\\"form-control\\\">\\n      <div class=\\\"alert alert-danger\\\" *ngIf=\\\"passwordRegister.touched && !passwordRegister.valid \\\">\\n        <div *ngIf=\\\"passwordRegister.errors.required\\\">Password is required</div>\\n      </div>\\n  </div>\\n\\n  <div class=\\\"form-group\\\">\\n    <div *ngIf=\\\"nomeRegister.invalid || emailRegister.invalid || passwordRegister.invalid ; else button_available\\\">\\n      <button disabled class=\\\"btn btn-outline-primary\\\">Sign Up</button>\\n    </div>\\n\\n    <ng-template #button_available>\\n      <button type=\\\"submit\\\" (click)=\\\"userRegister(nomeRegister.value, emailRegister.value, passwordRegister.value);\\\" class=\\\"btn btn-primary\\\">Sign Up</button>\\n    </ng-template>\\n\\n    <div class=\\\"alert alert-success\\\" role=\\\"alert\\\" id=\\\"alertSucc\\\">\\n      Account created with success!\\n    </div>\\n\\n    <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\" id=\\\"alertErr\\\">\\n      Oops something went wrong!\\n    </div>\\n\\n  </div>\\n</form>\"","import { Component} from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Component({\n  selector: 'register-form',\n  templateUrl: './register-form.component.html',\n  styleUrls: ['./register-form.component.css']\n})\nexport class RegisterFormComponent {\n  title = 'register';\n  data: any = {};\n  alertDiv = (<HTMLInputElement>document.getElementById('alertSucc'))\n\n  constructor(private http: HttpClient) {\n  }\n\n  userRegister(name, email, pass){\n\n    var alertSucc = (<HTMLInputElement>document.getElementById('alertSucc'));\n    var alertErr = (<HTMLInputElement>document.getElementById('alertErr'));\n\n    this.http.post(\"http://localhost:3000/api/auth/register\", {\n      \n      \"email\": name,\n      \"password\": email,\n      \"name\": pass\n\n    }).subscribe(\n      res => { \n        console.log(res);\n        this.data = res;\n        (<HTMLInputElement>document.getElementById('emailRegister')).value = '';\n        (<HTMLInputElement>document.getElementById('nomeRegister')).value = '';\n        (<HTMLInputElement>document.getElementById('passwordRegister')).value = '';\n        alertSucc.style.display = \"block\";\n        this.showAlert(alertSucc);\n      },\n      err => {\n        console.log(err)\n        alertSucc.style.display = \"none\";\n        alertErr.style.display = \"block\";\n        this.showAlert(alertErr);\n      }\n    );\n  }\n\n  showAlert(alert) {\n    var count = 2; // set secconds\n    var counter = setInterval(function() {\n      alert.style.display = \"none\"\n        //clearInterval(counter) // stop interval\n    }, 1000 * count);\n  }\n}","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->   \\n<div class=\\\"container \\\">\\n  <div class=\\\"row\\\">\\n      <div class=\\\"col-md-6\\\">\\n        <register-form></register-form>\\n      </div>\\n\\n      <div class=\\\"col-md-6\\\">\\n        <login-form></login-form>\\n      </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'register-login',\n  templateUrl: './register-login.component.html',\n  styleUrls: ['./register-login.component.css']\n})\nexport class RegisterLoginComponent implements OnInit {\n\n  constructor() { \n    localStorage.clear();\n  }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}